scalar DateTime

##################
#####  Enums #####
##################

enum PhotoCategory {
  SELFIE,
  PORTRAIT,
  LANDSCAPE,
  ACTION,
  GRAPHIC
}

enum SortDirection {
  ASCENDING,
  DESCENDING
}

enum SortablePhotoField {
  id,
  name,
  description,
  createdAt
}

#####################
#####   Tupes    ####
#####################

"""
A user authenticated through Github
"""
type User {
  """
  GitHub login
  """
  githubLogin: ID!,
  """
  User name, from GitHub profile
  """
  name: String,
  """
  URL to the user's avatar, from Github profile
  """
  avatar: String,
  """
  All photos posted by user
  """
  photos: [Photo!]!,
  """
  All photos the user is tagged in
  """
  taggedIn: [Photo!]
}

"""
Payload for GitHub authentication
"""
type AuthPayload {
  """
  Details of the newly authenticated user
  """
  user: User!,
  """
  Token for user authentication for future requests
  """
  token: String!
}

"""
A photo uploaded on the app
"""
type Photo {
  """
  Unique ID
  """
  id: ID!,
  """
  Name of the photo, provided by uploading user
  """
  name: String!,
  """
  Optional description of the photo
  """
  description: String,
  """
  URL where the photo is stored
  """
  url: String!,
  """
  Category the photo belongs to
  """
  category: PhotoCategory!,
  """
  Details of the user who uplaoded the photo
  """
  postedBy: User!
  """
  List of users tagged in the photo
  """
  taggedUsers: [User!],
  """
  Upload date and time for the photo
  """
  createdAt: DateTime!,
}

#####################
#### Input types ####
#####################

input PostPhotoInput {
  name: String!,
  description: String,
  category: PhotoCategory=PORTRAIT
}

input PhotoListFilters {
  postedBy: String,
}


#####################
####     Query   ####
#####################
type Query {
  """
  Get details of currently logged in user
  """
  me: User,
  """
  Get the total number of photos
  """
  totalPhotos: Int!,
  """
  List all photos with filters
  """
  allPhotos(filters: PhotoListFilters): [Photo!]!,
  """
  Get photo by ID
  """
  Photo(id: String!): Photo,
  """
  Get the total number of users of the app
  """
  totalUsers: Int!,
  """
  List and filter users of the app
  """
  allUsers: [User!]!,
  """
  Get user by ID
  """
  User(githubLogin: String!): User,
}

#####################
####  Mutation   ####
#####################

type Mutation {
  postPhoto(input: PostPhotoInput!): Photo!,
  authenticateWithGithub(code: String!): AuthPayload!,
  authenticateFakeUser(githubLogin: String!): AuthPayload!,
  addFakeUsers(count: Int = 1): [User!]!,
}
